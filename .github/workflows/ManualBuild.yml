# 🚀 手动构建 Sing-Box OSPF 镜像
name: 🛠️ Manual Build Docker Image

# 触发条件
on:
  # 手动触发
  workflow_dispatch:
    inputs:
      tag:
        default: '1.8.14'
        description: "指定要构建的版本标签"
        required: true
        type: string

# 权限设置
permissions:
  contents: read  # 读取仓库内容
  packages: write # 写入包 (用于推送镜像)

# 全局环境变量
env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  SING_BOX_REPO: SagerNet/sing-box

# 工作流任务
jobs:
  # ==========================================
  # 检查版本是否存在
  # ==========================================
  check:
    name: 🔍 检查版本
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-version.outputs.tag }}
      status: ${{ steps.check-version.outputs.status }}
      options: ${{ steps.check-version.outputs.options }}
    steps:
      - name: 🔎 检查版本是否有效
        id: check-version
        run: |
          # 获取用户指定的标签
          TAG=v${{ github.event.inputs.tag }}
          GIT_TAG=$(curl -s https://api.github.com/repos/${{ env.SING_BOX_REPO }}/releases?per_page=100 | jq -r '.[] | .tag_name'|grep $TAG || echo "")

          # 获取仓库名称（不含所有者）
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          
          # 检查 GitHub Container Registry 中是否已存在该标签
          GHCR_TAG=$(curl -sL -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"   -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/user/packages/container/${REPO_NAME}/versions?per_page=100 |jq -r '.[] | select(.metadata.container.tags[] | contains("latest")) | .metadata.container.tags[] | select(. != "latest")'||echo '') 
          
          # 输出版本信息
          echo "📦 GHCR 版本: ${GHCR_TAG}"
          echo "🏷️ Git Release 版本: ${GIT_TAG}"
          
          # 判断是否需要构建
          if [ -n "${GIT_TAG}" ]
          then
            if [ -z "${GHCR_TAG}" ]
            then
              # 获取编译选项
              options=$(curl -sSL https://raw.githubusercontent.com/${{ env.SING_BOX_REPO }}/refs/heads/main/Dockerfile|grep -A 1 tags|grep with|awk -F\" '{print $2}' || echo "with_quic,with_grpc,with_wireguard,with_shadowsocksr,with_ech,with_utls,with_reality_server,with_acme,with_clash_api")
              echo "✅ 版本有效，准备构建: ${GIT_TAG}"
              echo "tag=${GIT_TAG}" >> $GITHUB_OUTPUT
              echo "status=success" >> $GITHUB_OUTPUT
              echo "options=${options}" >> $GITHUB_OUTPUT
            else
              echo "⏭️ 标签 ${GIT_TAG} 已存在于 GitHub Container Registry 中"
              echo "status=fail" >> $GITHUB_OUTPUT
            fi
          else
              echo "❌ 无法找到 Git 标签: ${TAG}"
              echo "status=fail" >> $GITHUB_OUTPUT
          fi

  # ==========================================
  # 构建多平台镜像
  # ==========================================
  build:
    name: 🏗️ 构建 ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.status != 'fail' }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/386
          - linux/ppc64le
          - linux/riscv64
          - linux/s390x
    steps:
      - name: 📥 检出 sing-box-ospf
        uses: actions/checkout@v4
        with:
          path: sing-box-ospf
          
      - name: 📥 检出 sing-box ${{ needs.check.outputs.tag }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SING_BOX_REPO }}
          path: sing-box
          ref: ${{ needs.check.outputs.tag }}
          
      - name: 🔧 准备构建环境
        shell: bash
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          mv sing-box-ospf/Dockerfile sing-box/Dockerfile
          mv sing-box-ospf/entrypoint.sh sing-box/entrypoint.sh
          
      - name: 🛠️ 设置 QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: 🛠️ 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 登录 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
          
      - name: 📋 生成 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
              latest=false
          tags: |
              type=raw,value=${{ needs.check.outputs.tag }}
              
      - name: 🔨 构建并推送镜像
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./sing-box
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            OPTIONS=${{ needs.check.outputs.options }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Sing-Box with OSPF support
            org.opencontainers.image.licenses=MIT
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          
      - name: 📤 导出摘要
        shell: bash
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: 📦 上传摘要
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # ==========================================
  # 合并多平台镜像
  # ==========================================
  merge:
    name: 🔄 合并多平台镜像
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.status != 'fail' }}
    needs:
      - build
      - check
    steps:
      - name: 📥 下载摘要
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: 🛠️ 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 📋 生成 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
              latest=false
          tags: |
              type=raw,value=${{ needs.check.outputs.tag }}
              
      - name: 🔑 登录 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
          
      - name: 🔄 创建清单列表并推送
        shell: bash
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
            
      - name: 🔍 检查镜像
        shell: bash
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
